name: Deploy Secure Go Web Application with Static and Dynamic Analysis

on:
  push:
    branches:
      - secure_testing  # Trigger workflow on push to the secure branch

jobs:
  static-analysis:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.2

      # Step 3: Install gosec for static analysis
      - name: Install gosec
        run: |
          curl -sSfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin

      # Step 4: Run gosec for static analysis
      - name: Run gosec (Static Analysis)
        run: |
          gosec ./...
        continue-on-error: true

      # Step 5: Save gosec report
      - name: Save gosec report
        run: |
          gosec -fmt=json -out=gosec-report.json ./...
        continue-on-error: true

      # Step 6: Upload gosec report
      - name: Upload gosec report
        uses: actions/upload-artifact@v3
        with:
          name: gosec-report
          path: gosec-report.json

  test:
    runs-on: ubuntu-latest
    needs: static-analysis

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.2

      # Step 3: Run unit tests
      - name: Run unit tests
        run: |
          go test -v ./...

      # Step 4: Generate test coverage report
      - name: Generate test coverage report
        run: |
          go test -coverprofile=coverage.out ./...

      # Step 5: Upload test coverage report
      - name: Upload test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.out

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.2

      # Step 3: Write the .env file for the application
      - name: Write .env file
        run: |
          echo "DBUSER=${{ secrets.DBUSER }}" >> .env
          echo "DBPASS=${{ secrets.DBPASS }}" >> .env
          echo "DBADDR=${{ secrets.DBADDR }}" >> .env
          echo "DBNAME=${{ secrets.DBNAME }}" >> .env
          echo "JWTSECRET=${{ secrets.JWTSECRET }}" >> .env

      # Step 4: Build the Go application
      - name: Build the application
        run: |
          go build -o sqli ./cmd

      # Step 5: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t natnaelcrypto/go-web-application-secure:latest .

      # Step 6: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker login -u natnaelcrypto -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
          docker push natnaelcrypto/go-web-application-secure:latest

  dynamic-test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Run OWASP ZAP Dynamic Analysis
      - name: Run OWASP ZAP Scan (Dynamic Analysis)
        run: |
          chmod -R 777 $(pwd)
          docker network create zap-network || true
          docker run --rm --network zap-network --name app-container -p 5000:5000 natnaelcrypto/go-web-application-secure:latest &

          # Wait for the app to start
          sleep 10

          # Run the ZAP scan with authentication details
          docker run --rm --network zap-network -v $(pwd):/zap/wrk:rw \
            -e ZAP_USERNAME=${{ secrets.ZAP_USERNAME }} \
            -e ZAP_PASSWORD=${{ secrets.ZAP_PASSWORD }} \
            -t decoyxraylapse/zap2docker-stable:2.13.0 \
            zap-baseline.py -t http://app-container:5000 -r zap-report.html -j zap-out.json -d

        continue-on-error: true

      # Step 3: Upload OWASP ZAP HTML report
      - name: Upload OWASP ZAP HTML Report
        uses: actions/upload-artifact@v3
        with:
          name: zap-html-report
          path: zap-report.html
        continue-on-error: true

      # Step 4: Upload OWASP ZAP JSON Output
      - name: Upload OWASP ZAP JSON Output
        uses: actions/upload-artifact@v3
        with:
          name: zap-json-output
          path: zap-out.json
        continue-on-error: true

  deploy:
    runs-on: ubuntu-latest
    needs: [build, dynamic-test]

    steps:
      # Step 1: Deploy application (example placeholder)
      - name: Deploy to production
        run: |
          echo "Deploying application to production..."